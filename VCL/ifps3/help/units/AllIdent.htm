<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD>
<META name="GENERATOR" content="rjPasDoc 0.7">
<TITLE>All Identifiers</TITLE>
<LINK rel="StyleSheet" href="Help.css">
</HEAD>
<BODY bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#800080" alink="#FF0000">
<TABLE cellspacing=2 cellpadding=4 width=100%>
<TR bgcolor="e0e0e0">
<TD><A href="AllUnits.htm"><CENTER>Units</CENTER></A></TD>
<TD><A href="AllClass.htm"><CENTER>Classes, Interfaces, Objects</CENTER></A></TD>
<TD><A href="AllTypes.htm"><CENTER>Types</CENTER></A></TD>
<TD><A href="AllVaria.htm"><CENTER>Variables</CENTER></A></TD>
<TD><A href="AllConst.htm"><CENTER>Constants</CENTER></A></TD>
<TD><A href="AllFuncs.htm"><CENTER>Functions, Procedures</CENTER></A></TD>
<TD><A href="AllIdent.htm"><CENTER>Identifiers</CENTER></A></TD>
</TR>
</TABLE>
<H1>All Identifiers</H1>
<TABLE cellspacing=2 cellpadding=4 width=100%>
<TR bgcolor="#e0e0e0"><TH>Name</TH><TH>Unit</TH><TH>Description</TH></TR> 
<TR bgcolor=#efefef valign=top><TD><A href="ifpiclass.htm#11">AddImportedClassVariable</A></TD>
<TD><A href="ifpiclass.htm">ifpiclass</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#185">btArray</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>An array</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#186">btClass</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Compile time class type; In IFPS3 external classes are not of one defined type (They could be anything from an integer to a pointer)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#187">btDouble</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 8 byte float (double)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#188">btEnum</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Compile time enumeration; This will be a btu32 when compiled</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#189">btExtended</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 10 byte float (extended)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#190">btPChar</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A PChar (internally the same as a string)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#191">btPointer</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A pointer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#192">btProcPtr</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Compile time procedural pointer (will be btu32 when compiled)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#193">btRecord</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#194">btResourcePointer</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A resource pointer: Variable that can contain things from outside the script engine</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#195">btReturnAddress</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Executer internal type for return addresses, can not be used as a type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#196">btS16</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 2 byte signed integer (smallint)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#197">btS32</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 4 byte signed integer (Integer/Longint)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#198">btS64</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>An 8 byte signed integer (int64)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#199">btS8</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 1 byte signed integer (Shortint)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#200">btSingle</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 4 byte float (single)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#201">btString</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#202">btU16</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 2 byte unsigned integer (word)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#203">btU32</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 4 byte unsigned integer (cardinal/longword)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#204">btU8</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A 1 byte unsigned integer (byte)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#205">btVariant</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>A variant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpiclassruntime.htm#26">ClassRuntimeGetRPFuncs</A></TD>
<TD><A href="ifpiclassruntime.htm">ifpiclassruntime</A></TD>
<TD>Return the RPFuncs for other libraries</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#206">CM_A</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Assign command</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#207">cm_bn</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Boolean NOT</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#208">Cm_C</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Call</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#209">CM_CA</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Calculate Command</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#210">Cm_CG</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Conditional Goto</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#211">Cm_CNG</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Conditional NOT Goto</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#212">CM_CO</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Compare</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#213">Cm_cv</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Call Var</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#214">cm_fg</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Flag Goto</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#215">Cm_G</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Goto</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#216">CM_P</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Push</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#217">CM_PO</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Pop</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#218">Cm_Pt</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Push Type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#219">CM_PV</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Push Var</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#220">Cm_R</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Ret</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#221">cm_sf</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Set Flag</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#222">cm_sp</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Set Pointer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#223">Cm_ST</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Set Stack Type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#224">cm_vm</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Script internal command: Var Minus</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#93">CreateVariant</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Create a variant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#331">CVAL_Addr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: used when a value must be read from an address</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#332">CVAL_AllocatedStackReg</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: same as address except that it has to be freed otherwise</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#333">CVAL_Array</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal Constant: Array</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#334">CVAL_ArrayAllocatedStackRec</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal Constant: ArrayAllocatedStackRec same as <CODE><A href="ifpscomp.htm#332">CVAL_AllocatedStackReg</A></CODE></TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#335">CVAL_ClassMethodCall</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal contant: A method call</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#336">CVAL_ClassProcCall</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: A method call</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#337">CVAL_ClassPropertyCallGet</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: Property get method</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#338">CVAL_ClassPropertyCallSet</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: Property set method</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#339">CVAL_Data</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: used when a value is plain data</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#340">CVAL_Eval</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: used when there are sub calculations</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#341">CVAL_Proc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: used for function calls</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#342">CVAL_PushAddr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal constant: used when a value must be read from an address and pushed</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#343">CVAL_VarProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal Constant: Procedural Call with variable procedure number</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidll2.htm#53">DefaultCC</A></TD>
<TD><A href="ifpidll2.htm">ifpidll2</A></TD>
<TD>The default CC</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidelphiruntime.htm#49">DelphiRPFunc</A></TD>
<TD><A href="ifpidelphiruntime.htm">ifpidelphiruntime</A></TD>
<TD>See source</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#94">DisposeVariant</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Decrease the variant's refcount and free it if it's 0</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidll2.htm#55">DllExternalProc</A></TD>
<TD><A href="ifpidll2.htm">ifpidll2</A></TD>
<TD>Assign this to the TIFPSCompiler.OnExternal event</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#287">FastLowerCase</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Fast uppercase</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#288">FastUpperCase</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Fast uppercase</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#289">FloatToStr</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Convert a float to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#95">FreePIFVariantList</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Free a list of variants and also the list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#290">Fw</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Return the first word of a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#96">GetIFPSArrayLength</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the length of a variant array</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#97">GetInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a variant (as Longint)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#98">GetReal</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a variant (as Extended)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#99">GetString</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a variant (as String)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#100">GetUInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a variant (as Cardinal/Longword)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#291">GRFW</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Get the first word and remove it</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#225">IFPSAddrNegativeStackStart</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Start of the negative stack</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#226">IFPSAddrStackStart</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Start of the positive stack</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#227">IFPSCurrentBuildNo</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>The current build of the compiler and executer.</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#228">IFPSCurrentversion</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>The current version of the script engine</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#229">IFPSLowBuildSupport</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>The lowest supported build by the executer.</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#382">IFPSMessageToString</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Convert a message to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#230">IFPSValidHeader</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>The header of a compiled IFPS3 binary must start with this</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#101">IFPSVariantToString</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Convert a variant to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#8">InnerfuseCall</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#292">IntToStr</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Integer to string conversion</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#102">LGetInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of an Integer variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#103">LGetReal</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a real variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#104">LGetStr</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of a string variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#105">LGetUInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Get the value of an unsigned integer variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#106">LSetInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Set the value of an Integer variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#107">LSetReal</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Set the value of a real variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#108">LSetStr</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Set the value of a string variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#109">LSetUInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Set the value of an unsigned integer variant in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#244">MakeHash</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Make a hash of a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#281">MaxListSize</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>Maximum number of items in a list</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3optm.htm#279">OptimizeScript</A></TD>
<TD><A href="ifps3optm.htm">ifps3optm</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#60">PBTArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#61">pbtrecord</A></CODE> PBTRecord</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#61">pbtrecord</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>PBTRecord is a pointer to a <CODE><A href="ifps3.htm#73">TbtRecord</A></CODE> record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#62">PBTReturnAddress</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#74">TBTReturnAddress</A></CODE> PBTReturnAddress is a pointer to an TBTReturnAddress record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#63">PByteArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Pointer to array of bytes</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#344">PCalc_Item</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>i</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#64">PDWordArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Pointer to array of words</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#65">PIFProcRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#81">TIFProcRec</A></CODE> PIFProcRec is a pointer to a TIProcRec record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#345">PIFPSConstant</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSContant is a pointer to a TIFPSConstant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#346">PIFPSPascalCompilerMessage</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Contains a pointer to an TIFPSPascalCompilerMessages record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#347">PIFPSProceduralType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSProceduralType is a pointer to <CODE><A href="ifpscomp.htm#370">TIFPSProceduralType</A></CODE></TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#348">PIFPSProcedure</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSProcedure is a pointer to a TIFPSProcedure</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#349">PIFPSProcVar</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD><CODE><A href="ifpscomp.htm#372">TIFPSProcVar</A></CODE> PIFPSProcVar is a pointer to a TIFPSProcVar record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#350">PIFPSRecordType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSRecordType is is used to store records</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#351">PIFPSRegProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#66">PIFPSResource</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#84">TIFPSResource</A></CODE> PIFPSResource is a pointer to a TIFPSResource record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#352">PIFPSType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSType is a pointer to a <CODE><A href="ifpscomp.htm#375">TIFPSType</A></CODE> record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#353">PIFPSUsedRegProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSUsedRegProc is a pointer to an TIFPSUsedRegProc</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#354">PIFPSValue</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Pointer to <CODE><A href="ifpscomp.htm#377">TIFPSValue</A></CODE> type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#355">PIFPSVar</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>PIFPSVar is a pointer to a TIFPSVar record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#356">PIFRecField</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>if calcCmd > 128 then it's already processed</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#67">PIFRecordType</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>PIFRecordType is a pointer to record information</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#68">PIFTypeRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Pointer to <CODE><A href="ifps3.htm#88">TIFTypeRec</A></CODE></TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#69">PIFVariant</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#89">TIFVariant</A></CODE> PIFVariant is a pointer to a TIFVariant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#357">PIfVariant</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>The compile time variant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#70">PPIFVariant</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#69">PIFVariant</A></CODE> PPIFVariant is a pointer to a PIFVariant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#282">PPointerList</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>PPointerList is pointing to an array of pointers</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#71">PProcRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#90">TProcRec</A></CODE> PProcRec is pointer to a TProcRec record</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#1">PResourcePtrSupportFuncs</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidll2runtime.htm#57">ProcessDllImport</A></TD>
<TD><A href="ifpidll2runtime.htm">ifpidll2runtime</A></TD>
<TD>Process a dll import (no need to call this function)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpiclassruntime.htm#27">RegisterClassLibaryRuntime</A></TD>
<TD><A href="ifpiclassruntime.htm">ifpiclassruntime</A></TD>
<TD>Register the classes at runtime</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidelphi.htm#47">RegisterDelphiFunctionC</A></TD>
<TD><A href="ifpidelphi.htm">ifpidelphi</A></TD>
<TD>Register a normal Delphi function at runtime. Decl should be the exact declaration of the function. But since the const keyword is not support yet, you should leave that out.</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidelphiruntime.htm#51">RegisterDelphiFunctionR</A></TD>
<TD><A href="ifpidelphiruntime.htm">ifpidelphiruntime</A></TD>
<TD>Register a delphi function</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidll2runtime.htm#58">RegisterDLLRuntime</A></TD>
<TD><A href="ifpidll2runtime.htm">ifpidll2runtime</A></TD>
<TD>Register the dll runtime library</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3lib_std.htm#275">RegisterStandardLibrary_C</A></TD>
<TD><A href="ifps3lib_std.htm">ifps3lib_std</A></TD>
<TD>In your Compilers OnUses proc: RegisterStandardLibrary_C registers the standard library. function floattostr(e: extended): string; function inttostr(i: Longint): string; function strtoint(s: string): Longint; function strtointdef(s: string; def: Longint): Longint; function copy(s: string; ifrom, icount: Longint): string; function pos(substr, s: string): Longint; procedure delete(var s: string; ifrom, icount: Longint): string; procedure insert(s: string; var s2: string; ipos: Longint): string; function getarraylength(var v: array): Integer; procedure setarraylength(var v: array; i: Integer); Function StrGet(var S : String; I : Integer) : Char; procedure StrSet(c : Char; I : Integer; var s : String); Function Uppercase(s : string) : string; Function Lowercase(s : string) : string; Function Trim(s : string) : string; Function Length(s : String) : Longint; procedure SetLength(var S: String; L: Longint); Function Sin(e : Extended) : Extended; Function Cos(e : Extended) : Extended; Function Sqrt(e : Extended) : Extended; Function Round(e : Extended) : Longint; Function Trunc(e : Extended) : Longint; Function Int(e : Extended) : Longint; Function Pi : Extended; Function Abs(e : Extended) : Extended; function StrToFloat(s: string): Extended; Function FloatToStr(e : Extended) : String; Function Padl(s : string;I : longInt) : string; Function Padr(s : string;I : longInt) : string; Function Padz(s : string;I : longInt) : string; Function Replicate(c : char;I : longInt) : string; Function StringOfChar(c : char;I : longInt) : string;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3lib_stdr.htm#277">RegisterStandardLibrary_R</A></TD>
<TD><A href="ifps3lib_stdr.htm">ifps3lib_stdr</A></TD>
<TD>This function registers all standard functions. Call this function before loading your script into the executer.</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#110">SetIFPSArrayLength</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Set the length of a variant array</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#383">SetVarExportName</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Set the name of an exported variable</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpiclassruntime.htm#28">SetVariantToClass</A></TD>
<TD><A href="ifpiclassruntime.htm">ifpiclassruntime</A></TD>
<TD>Set a runtime variant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#293">StrToInt</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>String to integer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#294">StrToIntDef</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>String to integer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#72">TBTArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#73">TbtRecord</A></CODE> tbtrecord</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#231">TbtDouble</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Double</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#232">TbtExtended</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Extended</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#73">TbtRecord</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TbtRecord is used to store the fields in a record or array</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#74">TBTReturnAddress</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TBTReturnAddress is a record used to store return information</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#233">TbtS16</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Smallint</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#234">TbtS32</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Integer/Longint</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#235">tbts64</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>An 8 byte signed integer (int64)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#236">TbtS8</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Shortint</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#237">TbtSingle</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Single</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#238">TbtString</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>String/Pchar</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#239">TbtU16</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>word</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#240">TbtU32</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Cardinal/Longword</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#241">TbtU8</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>Byte</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#75">TByteArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Array of bytes</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#358">TCalc_Item</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#2">TCallingConvention</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>Defines: NOSMARTLIST - Don't use the smart list option NOSMARTMM - Don't use the smart PIFVariant allocater</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3debug.htm#246">TDebugMode</A></TD>
<TD><A href="ifps3debug.htm">ifps3debug</A></TD>
<TD>The current debugging mode</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidelphiruntime.htm#50">TDelphiCallingConvention</A></TD>
<TD><A href="ifpidelphiruntime.htm">ifpidelphiruntime</A></TD>
<TD>The calling convention</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpidll2.htm#54">TDllCallingConvention</A></TD>
<TD><A href="ifpidll2.htm">ifpidll2</A></TD>
<TD>Used to store the possible calling conventions</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#76">TDWordArray</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Array of dwords</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#77">TIFArrayType</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFArrayType is a pointer to an other type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#78">TIFError</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFError contains all possible errors</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#111">TIFErrorToString</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>Convert an error to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#79">TIFFreeProc</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#71">PProcRec</A></CODE> FreeProc is called when a PProcRec is freed</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIfList.htm">TIfList</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>TIfList is the list class used in IFPS</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#283">TIFParserError</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>The error occured while parsing</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#284">TIFParserErrorKind</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>TIFParserErrorKind is used to store the parser error</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIfPascalParser.htm">TIfPascalParser</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>TIfPacalParser is the parser used to parse the current script</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#285">TIfPasToken</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>TIFPasToken is used to store the type of the current token</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#80">TIFProc</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="TIFPSExec.htm">TIFPSExec</A></CODE> <CODE><A href="ifps3.htm#65">PIFProcRec</A></CODE> <CODE><A href="TIfList.htm">TIfList</A></CODE> TIFProc is is the procedure definition of all external functions</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#81">TIFProcRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFProcRec contains a currently used internal or external function</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#242">TIFPSBaseType</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD>TIFPSBaseType is the most basic type -type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSCompileTimeClass.htm">TIFPSCompileTimeClass</A></TD>
<TD><A href="ifpiclass.htm">ifpiclass</A></TD>
<TD>Compiletime class</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSCompileTimeClassesImporter.htm">TIFPSCompileTimeClassesImporter</A></TD>
<TD><A href="ifpiclass.htm">ifpiclass</A></TD>
<TD>Class importer at compile time</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#359">TIFPSConstant</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSContant contains a constant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSDebugExec.htm">TIFPSDebugExec</A></TD>
<TD><A href="ifps3debug.htm">ifps3debug</A></TD>
<TD>The TIFPSDebugExec class is used to load and use compiler debug information</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSExec.htm">TIFPSExec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFPSExec is the core of the script engine executer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSExternalClass.htm">TIFPSExternalClass</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSExternalClass is used when external classes need to be called</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#360">TIFPSOnExportCheck</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>See TIFPSPascalCompiler.OnExportCheck</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#361">TIFPSOnExternalProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>See TIFPSPascalCompiler.OnExternalProc</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#82">TIFPSOnLineEvent</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>See TIFPSExec.OnRunLine</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#83">TIFPSOnSpecialProcImport</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>See TIFPSExec.AddSpecialProcImport</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#362">TIFPSOnUses</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>See TIFPSPascalCompiler.OnUses</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#363">TIFPSOnUseVariable</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>See TIFPSPascalCompiler.OnUseVariable</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#364">TIFPSOnWriteLineEvent</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>See TIFPSPascalCompiler.OnWriteLine</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSPascalCompiler.htm">TIFPSPascalCompiler</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#365">TIFPSPascalCompilerError</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Is used to store the type of a compiler error</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#366">TIFPSPascalCompilerHint</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Used to store the type of a hint</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#367">TIFPSPascalCompilerMessage</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Contains compiler messages</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#368">TIFPSPascalCompilerMessageType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Is used to store the type of the messages</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#369">TIFPSPascalCompilerWarning</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Is used to store the type of a warning</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#370">TIFPSProceduralType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSProceduralType contains information to store procedural variables</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#371">TIFPSProcedure</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSProcdure is used to store information about a procedure</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#372">TIFPSProcVar</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSProcVar is used to store procedural variables</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpiclass.htm#10">TIFPSPropType</A></TD>
<TD><A href="ifpiclass.htm">ifpiclass</A></TD>
<TD>Property type: iptRW = Read/Write; iptR= readonly; iptW= writeonly</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#373">TIFPSRecordType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSRecordType is is used to store records</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#374">TIFPSRegProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSRegProc is used to store the registered procs</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#84">TIFPSResource</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>A resource in IFPS3 is stored as a pointer to the proc and a tag (p)</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#85">TIFPSResourceFreeProc</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFPSResourceFreeProc is called when a resource needs to be freed</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSRuntimeClass.htm">TIFPSRuntimeClass</A></TD>
<TD><A href="ifpiclassruntime.htm">ifpiclassruntime</A></TD>
<TD>TIFPSRuntimeClass is one class at runtime</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIFPSRuntimeClassImporter.htm">TIFPSRuntimeClassImporter</A></TD>
<TD><A href="ifpiclassruntime.htm">ifpiclassruntime</A></TD>
<TD>TIFPSRuntimeClassImporter is the runtime class importer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#375">TIFPSType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSType contains a type definition</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#376">TIFPSUsedRegProc</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSUsedRegProc is used to store used registered procs</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#377">TIFPSValue</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Type containing types</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#378">TIFPSVar</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>TIFPSVar is used to store global variables</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3common.htm#243">TIFPSVariableType</A></TD>
<TD><A href="ifps3common.htm">ifps3common</A></TD>
<TD><CODE><A href="TIFPSPascalCompiler.htm#501">OnUseVariable</A></CODE> TIFPSVariableType is used in TIFPSComp.OnUseVariable event</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#379">TIFRecField</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#86">TIFRecordType</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFRecordType is used to store information about records</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#87">TIFStatus</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>The current status of the script</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="TIfStringList.htm">TIfStringList</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#88">TIFTypeRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFTypeRec is used to store all types inside the script</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#89">TIFVariant</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TIFvariant is variant used for storing all variables used by the script</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#380">TIfVariant</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>The compile time variant</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3debug.htm#247">TOnIdleCall</A></TD>
<TD><A href="ifps3debug.htm">ifps3debug</A></TD>
<TD>see TIFPSDebugExec.OnIdleCall</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3debug.htm#248">TOnSourceLine</A></TD>
<TD><A href="ifps3debug.htm">ifps3debug</A></TD>
<TD>see TIFPSDebugExec.OnSourceLine</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3utl.htm#286">TPointerList</A></TD>
<TD><A href="ifps3utl.htm">ifps3utl</A></TD>
<TD>An array of pointers</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#90">TProcRec</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TProcrec is used to store an external function that could be used by the script executer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#384">TransByteToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a byte to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#385">TransCardinalToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a cardinal to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#386">TransDoubleToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a double to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#387">TransExtendedToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a extended to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#388">TransLongintToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a longint to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#389">TransShortIntToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a shortint to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#390">TransSingleToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a single to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#391">TransSmallIntToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a smallint to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#392">TransWordToStr</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Transform a word to a string</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#3">TResourcePtrSupportFuncs</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#4">TResourcePtrToStrProc</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#5">TResultToRsourcePtr</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#6">TRPSResultMethod</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpscomp.htm#381">TSubOptType</A></TD>
<TD><A href="ifpscomp.htm">ifpscomp</A></TD>
<TD>Internal type used to store the current block type</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#91">TVariantResourceFreeProc</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>TVRMode TVariantResourceFreeProc is used when the scriptengine needs to free or duplicate a resourcepointer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifpicall.htm#7">TVarResourcePtrToStrProc</A></TD>
<TD><A href="ifpicall.htm">ifpicall</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#92">TVRFMode</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD><CODE><A href="ifps3.htm#91">TVariantResourceFreeProc</A></CODE> TVRMode is used to when the scriptengine needs to free or duplicate a resourcepointer</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#112">VGetFloat</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#113">VGetInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#114">VGetInt64</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#115">VGetString</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#116">VSetFloat</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#117">VSetInt</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#118">VSetInt64</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
<TR bgcolor=#efefef valign=top><TD><A href="ifps3.htm#119">VSetString</A></TD>
<TD><A href="ifps3.htm">ifps3</A></TD>
<TD>&nbsp;</TD>
</TR>
</TABLE>
<HR noshade size=1><EM>Generated by <A href="http://www.zeitungsjunge.de/delphi/">rjPasDoc 0.7</A> on Wed 15 May 2002 19:21:35</EM>
</BODY>
</HTML>
